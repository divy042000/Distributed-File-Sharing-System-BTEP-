// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: chunk.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChunkService_UploadChunk_FullMethodName   = "/proto.ChunkService/UploadChunk"
	ChunkService_DownloadChunk_FullMethodName = "/proto.ChunkService/DownloadChunk"
)

// ChunkServiceClient is the client API for ChunkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChunkService handles chunk uploads and downloads
type ChunkServiceClient interface {
	// Client uploads a chunk to a chunk server
	UploadChunk(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ChunkUploadRequest, ChunkUploadResponse], error)
	// Client downloads a chunk from a chunk server
	DownloadChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChunkData], error)
}

type chunkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkServiceClient(cc grpc.ClientConnInterface) ChunkServiceClient {
	return &chunkServiceClient{cc}
}

func (c *chunkServiceClient) UploadChunk(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ChunkUploadRequest, ChunkUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChunkService_ServiceDesc.Streams[0], ChunkService_UploadChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChunkUploadRequest, ChunkUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChunkService_UploadChunkClient = grpc.ClientStreamingClient[ChunkUploadRequest, ChunkUploadResponse]

func (c *chunkServiceClient) DownloadChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChunkData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChunkService_ServiceDesc.Streams[1], ChunkService_DownloadChunk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChunkRequest, ChunkData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChunkService_DownloadChunkClient = grpc.ServerStreamingClient[ChunkData]

// ChunkServiceServer is the server API for ChunkService service.
// All implementations must embed UnimplementedChunkServiceServer
// for forward compatibility.
//
// ChunkService handles chunk uploads and downloads
type ChunkServiceServer interface {
	// Client uploads a chunk to a chunk server
	UploadChunk(grpc.ClientStreamingServer[ChunkUploadRequest, ChunkUploadResponse]) error
	// Client downloads a chunk from a chunk server
	DownloadChunk(*ChunkRequest, grpc.ServerStreamingServer[ChunkData]) error
	mustEmbedUnimplementedChunkServiceServer()
}

// UnimplementedChunkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChunkServiceServer struct{}

func (UnimplementedChunkServiceServer) UploadChunk(grpc.ClientStreamingServer[ChunkUploadRequest, ChunkUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (UnimplementedChunkServiceServer) DownloadChunk(*ChunkRequest, grpc.ServerStreamingServer[ChunkData]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadChunk not implemented")
}
func (UnimplementedChunkServiceServer) mustEmbedUnimplementedChunkServiceServer() {}
func (UnimplementedChunkServiceServer) testEmbeddedByValue()                      {}

// UnsafeChunkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkServiceServer will
// result in compilation errors.
type UnsafeChunkServiceServer interface {
	mustEmbedUnimplementedChunkServiceServer()
}

func RegisterChunkServiceServer(s grpc.ServiceRegistrar, srv ChunkServiceServer) {
	// If the following call pancis, it indicates UnimplementedChunkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChunkService_ServiceDesc, srv)
}

func _ChunkService_UploadChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChunkServiceServer).UploadChunk(&grpc.GenericServerStream[ChunkUploadRequest, ChunkUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChunkService_UploadChunkServer = grpc.ClientStreamingServer[ChunkUploadRequest, ChunkUploadResponse]

func _ChunkService_DownloadChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChunkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChunkServiceServer).DownloadChunk(m, &grpc.GenericServerStream[ChunkRequest, ChunkData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChunkService_DownloadChunkServer = grpc.ServerStreamingServer[ChunkData]

// ChunkService_ServiceDesc is the grpc.ServiceDesc for ChunkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChunkService",
	HandlerType: (*ChunkServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadChunk",
			Handler:       _ChunkService_UploadChunk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadChunk",
			Handler:       _ChunkService_DownloadChunk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chunk.proto",
}
