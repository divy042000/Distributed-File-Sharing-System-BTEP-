syntax = "proto3";

package proto;

option go_package ="./";


// Master Service
service MasterService {
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
  
 rpc DeleteChunk(DeleteChunkRequest) returns (DeleteChunkResponse);

  rpc ReportChunk(ChunkReport) returns (ChunkResponse);

  rpc RegisterFile(RegisterFileRequest) returns (RegisterFileResponse);
  
  rpc GetFileMetadata(GetFileMetadataRequest) returns (GetFileMetadataResponse);

 rpc RegisterChunkServer (RegisterChunkServerRequest) returns (RegisterChunkServerResponse);
}


message RegisterChunkServerRequest {
  string server_id = 1;
  string address = 2;
}

message RegisterChunkServerResponse {
  bool success = 1;
  string message = 2;
}


message ChunkLocation {
    string chunk_id = 1;
    repeated string servers = 2;
    int64 chunk_size = 3;
    string chunk_hash = 4;
}


message GetChunkResponse {
    string file_id = 1;
    repeated ChunkLocation chunk_locations = 2;
    bool success = 3;
    string message = 4;
}


message RegisterFileRequest {
  string file_name = 1;
  string file_format = 2;
  int64 total_size = 3;
  int32 chunk_count = 4;
  repeated int64 chunk_sizes = 5;
  repeated string chunk_hashes = 6;
  int64 timestamp = 7;
  string client_id = 8;
  int32 priority = 9;
  int32 redundancy_level = 10;
  bool compression_used = 11;
}


message RegisterFileResponse {
  string file_id = 1;
  map<int32, ChunkServers> chunk_assignments = 3;
  bool success = 4;
  string message = 5;
}

message ChunkServers {
  string chunk_hash = 1;
  int32 chunk_index = 2;
  string leader = 3;
  repeated string replicas = 4;
}


message ReplicaServers {
  string chunk_hash = 1;
  int32 chunk_index = 2;
  repeated string replicas = 3;
}

// Chunk Server reporting new chunk
message ChunkReport {
  string chunk_id = 1;
  string server_id = 2;
  int32 version = 3;
}

// Response from the Master
message ChunkResponse {
  bool success = 1;
  string message = 2;
}

message GetFileMetadataRequest {
  string file_name = 1;
  string client_id = 2;
}

message GetFileMetadataResponse {
  string file_format = 1;
  int64 total_size = 2;
  int32 chunk_count = 3;
  repeated string chunk_hashes = 4;
  map<int32, ChunkServers> chunk_assignments = 5;
  string client_id = 6;
  bool success = 7;
  string message = 8;
}

message DeleteFileRequest{
  string file_name = 1;
  string client_id = 2;
}

message DeleteFileResponse{
  bool success = 1;
  string client_id = 2;
  string message = 3;
}

message DeleteChunkRequest {
  string chunk_id = 1;
}

message DeleteChunkResponse {
  bool success = 1;
  string message = 2;
}
